pragma solidity ^0.5.0;

// Contract file for minting new ERC721 Token
import "./ERC721Mintable.sol";

// The smart contract generated by Zokrates
import "./SquareVerifier.sol";


contract SolnSquareVerifier is CustomERC721Token {

    SquareVerifier squareVerifier;

    struct Solution {
        uint[2] a;
        uint[2][2] b;
        uint[2] c;
        uint[2] input;
        uint tokenId;
    }

    constructor(address _verifierAddress) CustomERC721Token() public {

        // Call to the Zokrates generated solidity Verifier contract
        squareVerifier = SquareVerifier(_verifierAddress);
    }

    // Mapping (hash => Solution)
    mapping(bytes32 => Solution) private _solutions;

    // Mapping (id => hash)
    mapping(uint => bytes32) private _tokenToSolution;

    // Mapping (hash => true/false) to see if solution exists for the hash
    mapping(bytes32 => bool) private _solutionForHash;

    event SolutionAccepted (uint tokenId);

    function mintNoProofRequired(address to, uint256 tokenId, string memory tokenURI) public returns (bool) {
        return super.mint(to, tokenId, tokenURI);
    }

    function mint(address to, uint256 tokenId, string memory tokenURI) public returns (bool) {

        require(_tokenToSolution[tokenId] != 0, "Proof is required to Mint new Tokens");
        return super.mint(to, tokenId, tokenURI);
    }

    function addSolution(uint[2] memory a, uint[2][2] memory b, uint[2] memory c, uint[2] memory input, uint tokenId) public {
        bytes32 hash = keccak256(abi.encodePacked(a, b, c, input));

        require(!_solutionForHash[hash], "Solution is not unique");

        _solutions[hash] = Solution(a, b, c, input, tokenId);
        _tokenToSolution[tokenId] = hash;

        _solutionForHash[hash] = true;

        // Emits event SolutionAccepted
        emit SolutionAccepted(tokenId);
    }
}


// SquareVerifier Contract inherits Verifier contract which is generated by Zokrates
contract SquareVerifier is Verifier {
    function mint(address to, uint256 tokenId, string memory tokenURI) public returns (bool);
}